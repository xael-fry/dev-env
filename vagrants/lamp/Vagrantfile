# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'yaml'

current_dir      = File.dirname(File.expand_path(__FILE__))
config_file_path = "#{current_dir}/config.yaml"
# Check if config file exist
if !File.file?(config_file_path) then
  print "ERROR: Cannot open the file #{config_file_path}"
  exit
else 
  configs          = YAML.load_file(config_file_path)
  vagrant_config   = configs['config'] 
  if !vagrant_config then
    print "ERROR: Config file format is invalid: cannot find key 'config'"
    exit
  end
end


# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  #config.vm.box = "debian/jessie64"
  config.vm.box = "debian/contrib-jessie64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data" 
  #config.vm.synced_folder ".", "/home/vagrant/sync"
  if !vagrant_config['share_folder'] || !File.exists?(vagrant_config['share_folder']) then
    print "WARN: Cannot find the folder to share #{vagrant_config['share_folder']}\n"
  end
  config.vm.synced_folder vagrant_config['share_folder'], "/vagrant", type: "virtualbox", group: "www-data", owner: "www-data"
  
  # Share current folder in order to access config file
  config.vm.synced_folder "", "/config", type: "virtualbox", group: "www-data", owner: "www-data"
  
    # Share current folder in order to access configuration file
  config.vm.synced_folder "", "/config", type: "virtualbox", group: "www-data", owner: "www-data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
     # Display the VirtualBox GUI when booting the machine
     vb.gui = true
  
     # Customize the amount of memory on the VM:
     # vb.memory = "1024"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
    
  # Begin Configuring
  config.vm.define "lamp" do|lamp|
    # Setting up hostname
    lamp.vm.hostname = "lamp"
    # Setting up machine's IP Address
    lamp.vm.network "private_network", ip: "192.168.205.10"
    # Provisioning with script.sh
    lamp.vm.provision :shell, path: "script.sh" 
  end 
  
end
